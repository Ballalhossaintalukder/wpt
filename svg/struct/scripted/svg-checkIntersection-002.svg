<svg xmlns="http://www.w3.org/2000/svg" xmlns:h="http://www.w3.org/1999/xhtml"><title>checkIntersection()</title><h:link href="https://svgwg.org/svg2-draft/struct.html#__svg__SVGSVGElement__checkIntersection" rel="help"/><h:script src="/resources/testharness.js"/><h:script src="/resources/testharnessreport.js"/><g id="g_outer"><g id="g_inner_top"><rect id="r_top_left" width="50" height="50"/><rect width="50" height="50" x="50"/></g><g transform="translate(0, 50)"><rect width="50" height="50"/><rect width="50" height="50" x="50"/></g></g><script>function makeRect(x, y, width, height) { const svg = document.documentElement; return Object.assign(svg.createSVGRect(), {x, y, width, height}); } test(t =&gt; { [ { element: &apos;r_top_left&apos;, rect: [10, 10, 10, 10], expected: true }, { element: &apos;r_top_left&apos;, rect: [10, 10, 80, 10], expected: true }, { element: &apos;r_top_left&apos;, rect: [60, 10, 10, 10], expected: false }, { element: &apos;g_inner_top&apos;, rect: [10, 10, 80, 10], expected: true }, { element: &apos;g_inner_top&apos;, rect: [60, 10, 10, 10], expected: false }, { element: &apos;g_outer&apos;, rect: [10, 10, 80, 10], expected: false }, { element: &apos;g_outer&apos;, rect: [10, 10, 80, 80], expected: true }, ].forEach(testcase =&gt; { const element = document.getElementById(testcase.element); const rect = makeRect(...testcase.rect); const svg = document.documentElement; assert_equals(svg.checkIntersection(element, rect), testcase.expected, `${document.title}, element ${testcase.element} rect ${testcase.rect}`); }); });</script></svg>